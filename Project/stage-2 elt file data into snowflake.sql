-- Use the database
USE DATABASE entertainment_db;


-- To configure a secure access to cloud storage, I am creating a storage integration used to delegate authentication responsibility for external cloud storage to a Snowflake identity and access management (IAM) entity.
CREATE STORAGE INTEGRATION IF NOT EXISTS shows_blob_integration
  TYPE = EXTERNAL_STAGE
  STORAGE_PROVIDER = 'AZURE'
  ENABLED = TRUE
  AZURE_TENANT_ID = 'xxxx-18c5-406f-8fd5-xxxxxxxx'
  STORAGE_ALLOWED_LOCATIONS = ('azure://devusecollector.blob.core.windows.net/doorstep');


-- Display the AZURE_CONSENT_URL. In a web browser, navigate to the URL in the AZURE_CONSENT_URL column. The page displays a Microsoft permissions request page. Follow the instructions.
DESC STORAGE INTEGRATION shows_blob_integration;


-- Create a new external STAGE in netflix_titles schema to use it for loading data from CSV files into Snowflake staging table.
-- Azure_SAS_TOKEN specifies the SAS (shared access signature) token for connecting to Azure and accessing the private/protected container where the files containing loaded data are staged. Credentials are generated by Azure.
CREATE STAGE IF NOT EXISTS netflix_titles.azure_stage
URL = 'azure://devusecollector.blob.core.windows.net/doorstep/'
CREDENTIALS = (AZURE_SAS_TOKEN ='xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx')
FILE_FORMAT = ( TYPE = CSV);


-- Create a snowflake task that runs on a schedule to load data from the CSV file into the Snowflake staging table
CREATE TASK IF NOT EXISTS netflix_titles.task_load_data_from_file_into_staging_table
WAREHOUSE = DATA_PIPELINES
SCHEDULE = '1 MINUTE'
AS
COPY INTO netflix_titles.stg_shows
FROM @azure://devusecollector.blob.core.windows.net/doorstep/netflix_titles.csv
FILE_FORMAT = (FORMAT_NAME = 'CSV');


-- Start the Snowflake task to begin the automated ELT process.
ALTER TASK task_load_data_from_file_into_staging_table RESUME;

-- Snowflake task to merge data from CLEANSED table into CLEANSED table.
CREATE OR REPLACE TASK netflix_titles.task_merge_data_from_staging_into_show_types_table
    WAREHOUSE = DEVELOPMENT
    SCHEDULE = '5 MINUTE'
AS
MERGE INTO
            entertainment_db.NETFLIX_TITLES.SHOW_TYPES R
        USING
        (
            SELECT
                DISTINCT ST.TYPE_ID AS TYPE_ID, LS.TYPE AS TYPE_NAME
            FROM
                entertainment_db.NETFLIX_TITLES.STG_SHOWS LS
                INNER JOIN DEV_BRONZE.NETFLIX_TITLES.SHOW_TYPES ST ON ST.TYPE_NAME = LS.TYPE
        ) L
        ON
            R.TYPE_ID = L.TYPE_ID 
        WHEN MATCHED THEN UPDATE SET
            R.TYPE_NAME = L.TYPE_NAME
        WHEN NOT MATCHED THEN INSERT
                ("TYPE_NAME")
                VALUES (L."TYPE_NAME"); --End of merge statement`;
;

-- Start the Snowflake task to trigger the merge to Snowflake table.
ALTER TASK netflix_titles.task_merge_data_from_cleansed_into_show_types_table RESUME;


-- Snowflake task to merge data from Staging table into CLEANSED table.
CREATE OR REPLACE TASK netflix_titles.task_merge_data_into_cleansed_table
    WAREHOUSE = DEVELOPMENT
    SCHEDULE = '5 MINUTE'
AS
   MERGE INTO
            entertainment_db.NETFLIX_TITLES.CLEANSED_SHOWS R
        USING
        (
            SELECT
                LS.CAST AS CAST, LS.COUNTRY AS COUNTRY, LS.DATE_ADDED AS DATE_ADDED, LS.DESCRIPTION AS DESCRIPTION, LS.DIRECTOR AS DIRECTOR, LS.DURATION AS DURATION, LS.LISTED_IN AS                             LISTED_IN, LS.RATING AS RATING, LS.RELEASE_YEAR AS RELEASE_YEAR, LS.SHOW_ID AS SHOW_ID, LS.TITLE AS TITLE, LS.TYPE AS TYPE, ST.TYPE_ID AS TYPE_ID
            FROM
                entertainment_db.NETFLIX_TITLES.STG_SHOWS_STREAM LS
                INNER JOIN entertainment_db.NETFLIX_TITLES.show_types ST
                ON ST.TYPE_NAME = LS.TYPE
        ) L
        ON
            R.SHOW_ID = L.SHOW_ID 
        WHEN MATCHED THEN UPDATE SET
            R.CAST = L.CAST, R.COUNTRY = L.COUNTRY, R.DATE_ADDED = L.DATE_ADDED, R.DESCRIPTION = L.DESCRIPTION, R.DIRECTOR = L.DIRECTOR, R.DURATION = L.DURATION, R.LISTED_IN = L.LISTED_IN,                 R.RATING = L.RATING, R.RELEASE_YEAR = L.RELEASE_YEAR, R.SHOW_ID = L.SHOW_ID, R.TITLE = L.TITLE, R.TYPE = L.TYPE, R.TYPE_ID = L.TYPE_ID
        WHEN NOT MATCHED THEN INSERT
                ("CAST", "COUNTRY", "DATE_ADDED", "DESCRIPTION", "DIRECTOR", "DURATION", "LISTED_IN", "RATING", "RELEASE_YEAR", "SHOW_ID", "TITLE", "TYPE", "TYPE_ID")
                VALUES (L."CAST", L."COUNTRY", L."DATE_ADDED", L."DESCRIPTION", L."DIRECTOR", L."DURATION", L."LISTED_IN", L."RATING", L."RELEASE_YEAR", L."SHOW_ID", L."TITLE", L."TYPE", L."TYPE_ID") --End of merge statement`;
;

-- Start the Snowflake task to trigger the merge to Snowflake table.
ALTER TASK netflix_titles.task_merge_data_into_cleansed_table RESUME;